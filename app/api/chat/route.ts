import { openai } from '@ai-sdk/openai'
import { streamText, CoreMessage } from 'ai'
import { NextRequest } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import {
  detectDangerousQuery,
  detectEmergency,
  detectSpecializationBySymptoms,
  detectRegion,
  generateHealthResponse,
  HEALTH_DISCLAIMERS,
  CZECH_MEDICAL_SPECIALIZATIONS
} from '@/lib/health/terminology'

// Konstanta pro podporovan√© AI providery
const AI_PROVIDER = process.env.AI_PROVIDER || 'openai'
const AI_MODEL = process.env.AI_MODEL || 'gpt-4o-mini'

// System prompt pro ƒçesk√Ω zdravotnick√Ω AI asistent
function generateSystemPrompt(specialization?: string, region?: string): string {
  const specializationInfo = specialization && CZECH_MEDICAL_SPECIALIZATIONS[specialization] 
    ? `\n\nKONTEXT SPECIALIZACE: ${specialization}\nPopis: ${CZECH_MEDICAL_SPECIALIZATIONS[specialization].description}`
    : ''
  
  const regionInfo = region ? `\nREGION: ${region}` : ''
  
  return `Jsi AI asistent pro ƒçesk√© zdravotnictv√≠ "DoktorNaDohled". Tvoje role je pom√°hat lidem naj√≠t vhodn√© l√©ka≈ôe a poskytovat z√°kladn√≠ zdravotn√≠ informace.

KRITICK√â PRAVIDLA:
1. NIKDY neposkytuj l√©ka≈ôsk√© diagn√≥zy ani nenavrhuj konkr√©tn√≠ l√©ƒçbu
2. V≈ΩDY doporuƒç konzultaci s kvalifikovan√Ωm l√©ka≈ôem
3. Pou≈æ√≠vej empatick√Ω a uklid≈àuj√≠c√≠ t√≥n v ƒçe≈°tinƒõ
4. Smƒõ≈ôuj pacienty k p≈ô√≠slu≈°n√© specializaci podle p≈ô√≠znak≈Ø
5. Nezav√°dƒõj√≠c√≠ rady - pouze obecn√© zdravotn√≠ informace
6. V≈ΩDY zaƒçni zdravotnick√Ωm disclaimerem

DOSTUPN√â SPECIALIZACE:
${Object.entries(CZECH_MEDICAL_SPECIALIZATIONS).map(([spec, data]) => 
  `‚Ä¢ ${spec}: ${data.description}`
).join('\n')}

TVOJE √öKOLY:
- Pomoci naj√≠t vhodnou specializaci podle p≈ô√≠znak≈Ø
- Doporuƒçit l√©ka≈ôe v dan√©m regionu (pokud specifikov√°n)
- Poskytnout obecn√© zdravotn√≠ informace
- Vysvƒõtlit co oƒçek√°vat p≈ôi n√°v≈°tƒõvƒõ l√©ka≈ôe
- Pomoci s p≈ô√≠pravou na l√©ka≈ôskou n√°v≈°tƒõvu

FORM√ÅT ODPOVƒöDI:
1. Zdravotnick√Ω disclaimer (povinn√Ω)
2. Anal√Ωza p≈ô√≠znak≈Ø a doporuƒçen√≠ specializace
3. Obecn√© rady pro p≈ô√≠pravu na n√°v≈°tƒõvu
4. Mockup doporuƒçen√≠ l√©ka≈ô≈Ø (pro demonstraci)

Pro doporuƒçen√≠ l√©ka≈ô≈Ø pou≈æ√≠vej form√°t:
DOCTORS_RECOMMENDATION: [{"id": "demo_id", "name": "Dr. Jan Nov√°k", "specialization": "specializace", "city": "mƒõsto", "rating": 4.5, "availability": "Voln√© term√≠ny tento t√Ωden"}]${specializationInfo}${regionInfo}`
}

// Funkce pro logov√°n√≠ zdravotn√≠ch dotaz≈Ø (bez osobn√≠ch √∫daj≈Ø)
function logHealthQuery(specialization: string | null, region: string | null, responseType: string) {
  console.log(`Health query - specialization: ${specialization}, region: ${region}, response_type: ${responseType}`)
}

// Funkce pro kontrol GDPR souhlasu
async function checkGDPRConsent(userId?: string): Promise<boolean> {
  if (!userId) return false
  
  try {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )
    
    const { data, error } = await supabase
      .from('gdpr_consent')
      .select('*')
      .eq('user_id', userId)
      .eq('consent_type', 'chat')
      .eq('consent_given', true)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()
    
    return !error && data
  } catch (error) {
    console.error('Chyba p≈ôi kontrole GDPR souhlasu:', error)
    return false
  }
}

// Hlavn√≠ POST handler pro AI chat
export async function POST(req: NextRequest) {
  try {
    const { messages, userId }: { messages: CoreMessage[], userId?: string } = await req.json()
    
    // Kontrola GDPR souhlasu (v produkci by se kontrolovalo podle autentifikace)
    // if (userId && !(await checkGDPRConsent(userId))) {
    //   return Response.json(
    //     { error: 'Nem√°te udƒõlen√Ω souhlas se zpracov√°n√≠m √∫daj≈Ø pro AI chat.' },
    //     { status: 403 }
    //   )
    // }
    
    const lastMessage = messages[messages.length - 1]
    if (!lastMessage) {
      return Response.json({ error: '≈Ω√°dn√° zpr√°va nebyla poskytnut√°.' }, { status: 400 })
    }
    
    // Extrakce textov√©ho obsahu ze zpr√°vy
    const messageContent = typeof lastMessage.content === 'string' 
      ? lastMessage.content 
      : Array.isArray(lastMessage.content) 
        ? lastMessage.content.map(part => 'text' in part ? part.text : '').join(' ')
        : ''
    
    // Anal√Ωza zdravotnick√©ho dotazu pomoc√≠ nov√© terminologie
    const healthResponse = generateHealthResponse(messageContent)
    const specialization = detectSpecializationBySymptoms(messageContent)
    const region = detectRegion(messageContent)
    
    // Logov√°n√≠ pro analytiku (bez osobn√≠ch √∫daj≈Ø)
    logHealthQuery(specialization, region, healthResponse.type)
    
    // Kontrola emergency situac√≠
    if (healthResponse.type === 'emergency') {
      const emergencyResponse = `üö® **URGENTN√ç UPOZORNƒöN√ç**
      
${HEALTH_DISCLAIMERS.emergency}

Na z√°kladƒõ va≈°eho dotazu doporuƒçuji okam≈æitƒõ kontaktovat zdravotnickou slu≈æbu.

Pokud nen√≠ situace akutn√≠ a chcete naj√≠t vhodn√©ho specialistu, mohu v√°m pomoci s vyhled√°n√≠m. ≈òeknƒõte mi, v jak√©m mƒõstƒõ hled√°te l√©ka≈ôe.`
      
      return Response.json({
        choices: [{
          message: { content: emergencyResponse },
          finish_reason: 'stop'
        }]
      })
    }
    
    // Kontrola nebezpeƒçn√Ωch dotaz≈Ø
    if (healthResponse.type === 'dangerous') {
      const safetyResponse = `${healthResponse.disclaimer}

Pro va≈°e zdravotn√≠ obt√≠≈æe se pros√≠m obra≈•te na:
‚Ä¢ **Praktick√©ho l√©ka≈ôe** - pro obecn√© zdravotn√≠ probl√©my
‚Ä¢ **Pohotovost** - pro akutn√≠ stavy (tel: 155)
‚Ä¢ **Z√°chrannou slu≈æbu** - pro ≈æivot ohro≈æuj√≠c√≠ stavy (tel: 112)

Mohu v√°m pomoci naj√≠t vhodn√©ho specialistu ve va≈°em regionu. ≈òeknƒõte mi, v jak√©m mƒõstƒõ hled√°te l√©ka≈ôe a jakou specializaci pot≈ôebujete.`
      
      return Response.json({
        choices: [{
          message: { content: safetyResponse },
          finish_reason: 'stop'
        }]
      })
    }
    
    // P≈ô√≠prava kontextu√°ln√≠ho promptu pro AI
    const contextualPrompt = generateSystemPrompt(specialization || undefined, region || undefined)
    
    // Streaming AI response pomoc√≠ Vercel AI SDK
    const result = await streamText({
      model: openai(AI_MODEL) as any, // Temporary fix for version compatibility
      system: contextualPrompt,
      messages: messages,
      temperature: 0.3, // Ni≈æ≈°√≠ hodnota pro konzistentnƒõj≈°√≠ zdravotnick√© odpovƒõdi
      maxTokens: 1000,
      onFinish: async (completion) => {
        // Roz≈°√≠≈ôen√© logov√°n√≠ pro analytiku (bez osobn√≠ch √∫daj≈Ø)
        console.log(`AI chat dokonƒçen - tokens: ${completion.usage?.totalTokens}, specializace: ${specialization}, region: ${region}, response_type: ${healthResponse.type}`)
        
        // V budoucnu zde bude tracking √∫spƒõ≈°nosti doporuƒçen√≠ l√©ka≈ô≈Ø
        if (completion.text.includes('DOCTORS_RECOMMENDATION')) {
          console.log('Generated doctor recommendations')
        }
      }
    })
    
    return result.toDataStreamResponse()
    
  } catch (error) {
    console.error('Chyba v AI chat API:', error)
    
    return Response.json(
      { 
        error: 'Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠ va≈°√≠ zpr√°vy. Zkuste to pros√≠m znovu za chv√≠li.',
        code: 'AI_ERROR'
      },
      { status: 500 }
    )
  }
}

// OPTIONS handler pro CORS
export async function OPTIONS() {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}